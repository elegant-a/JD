gitpush时出现timeout问题,
通过SwitchHosts进行IP地址修改
最后通过 git push --- 分支名

运行powershell,切换到cd desktop
创建一个新的vue工程
vue create jingdong 
初始化配置,Manually select features
选中babel
Router
Vuex
CSS Pre-processors
Linter/Formatter
下一步
3.xVUE版本
不选用旧版本的Router
选用dart-sass
使用标准的eslint配置
ESlint + Standard config
每一次保存都做单独的lint校验
Lint on save
把ESlint文件放入一个单独的文件里
把他不保存成一个future

下载两个插件eslint如果语法不规范会进行代码上的校验,
Vetur识别Vue中的语法
node_modules存储的是第三方的依赖模块
可以通过npm install 下载
.editorconfig是浏览器的默认配置
npm run serve 启动工程
assets放的是一些静态的文件
components放的是一些功能性组件
views放的是页面级别的文件
删除掉views和components里面的内容
去除相同的html文件在不同的html中的内容，
要先下载normalize.css npm install --save

背景色可以用f1f1f1
home cart order
BEM命名方法 __表示某个元素是某个元素的子元素
scss文件可以用&__item来表示子元素
图片的高宽比
避免因网络较慢引起图片加载缓慢问题
避免抖动使用hack(防抖)
ESlintrc需要加rules才可以忽略空格
"indent": ["off", 2],
"space-before-function-paren": 0
vue有时候会报错因为template中只允许有一个根节点
Vue会默认开启严格模式
需要在rules下关闭相应的功能
要增加代码的可维护性,就需要拆分相关的组件
由于创建时,使用了标准的VUE配置，比较严格ESLINT代码规范
删掉eslintrc.js目录下的@vue/standard即可去除空格报错问题
scoped限制我们css的作用范围,避免组件的相互影响,下载vue dev插件

V-for循环理解
在script标签中定义一个setup函数,
然后在定义一个数组
在template模板标签中使用v-for (item,index) in xxx
下面可以使用差值表达式等方式循环数组的内容{{item.text}}
v-html更新元素的html 如果是html标签里的属性,则不需要使用花括号
v-html="item.icon" 循环还需要加key值 :key="innerIndex"

路由跳转,路由权限校验
每一个路由项目都有一个beforeEnter这样的一个函数在进入路由之前可以
执行beforeEnter(to,from,next){
   解构赋值+三元表达式
   const {isLogin } = localStorage;
   isLogin ? next({name:'Home'}):next()
}

router.beforeEach((to,from,next)=>{
    在路由每次切换的时候可以执行
    const { isLogin } = localStorage;
    (isLogin || to.name === "Login")?next():next({name:'Login'})
})

vue-router提供了一个 userRouter的方法
我们可以通过
import { useRouter } from 'vue-router';
引入
我们可以通过路由实例的push方法跳转到下一个页面
setup(){
   const router = useRouter();
   const handleLogin = ()=>{
       localStorage.isLogin = true;
       router.push({name:'Home'})
   }
}

像登陆这种功能一般是要与后端的接口做交互的
fastmock(前端调接口与后端做交互)
安装axios插件

通过给账号和密码设置v-model双向绑定的请求
通过vue插件引入reavtive 使得用户在输入密码时即可获得用户输入的数据
const data = reactive({
    name:'',
    password:''
})
data.name
data.password
OC语法?

把request.js封装====>创建一个peomise对象,在里面发送一个AJAX的请求
通过axios发送请求
axios.post(url,data{
    baseURL:,
    headers:{'Content - Type':'application/json'}
}).then(response)=>{
    resolve(response.data)
}
为了解决当访问首页时,出现同时加载Login,Register等多个路由,
造成首页打开过慢,我们可以使用异步组件的方式,也就是动态路由
来控制页面的加载
动态路由,异步路由,组件的拆分与复用

写布局时,尽量由里向外面去撑布局
如果出现裂图的问题，可以通过给组件添加 v-show="item.imgUrl"来避免这种情况的发生
因为没有数据就不会展示

box-shadow:x坐标值 y坐标值 模糊程度 颜色

安装vue脚手架工具
怎么用webpack对脚手架进行打包,脚手架里面都已经配置好了
npm install -g @vue/cli
vue create ....
Manually select features
(人工的去选择一些特性)
Pick a linter / formatter config
选择ESlint
ESlint with error prevention only
每一次保存时,做一下lint的校验

Save this as a preset for future project(N)
npm run serve 启动这个项目(中间有webpack帮我们打包这个项目)

最为一个工程,源代码都放到src目录下
父传子 子组件用props数组来接收父组件传递过来的参数,
子传父 父组件需要通过componets对象来注册一下子组件

ref,reactive 响应式的引用
原理,通过Proxy对数据进行封装,当数据变化时,触发模板更新（也就是通过另一种方式实现了双向绑定）
同时proxy,'dell'变成proxy({value:'dell'})这样的一个响应式引用
调用值时,要使用name.value来调用
return{name}

ref是处理基础类型数据的方法
reactive是处理对象,数组等复杂数据类型的函数
处理之后数据就变成了动态响应，

父组件向子组件传值的时候在子组件调用的标签上使用:msg 在子组件中使用props继续调用(单文件组件)
路由是根据path路径不同展示不同的内容

这种加载路由的方式被称懒加载,异步加载路由
{
    path:'/profile',
    name:Profile,
    component:()=> import('../views/profile/Profile.vue')
}

to是跳转到相应路径的名字
<router-link to="/"></router-link>
router-link是跳转路由的标签

router-view 负责展示当前路由对应的组件内容

VueX数据管理框架
其中有state,mutations,actions,modules等属性

store是全局的,任何地方都可以用它

如想在组件 中调用
{{myName}}
export default{
   name:'Home',
   computed；{
       myName(){
           return this.$store.state.name
       }
   }
}

handleClick(){
    this.$store.dispatch('change')
    1.dispatch方法,派发一个action,名字叫做change
    2.感知到change这个action,执行store中actions下面的change方法
    3.commit 提交一个叫做 change 的数据改变
    4.mutation 感知到提交的change改变,执行change方法

    如果不需要异步操作,可以使用同步的commit方法操作
    this.$store.commit('change')
}

mutations只允许有同步的操作,不能有异步的操作

return this.$store.state.name
       
   change(state,str){
       state.name = str;
   }

state:{}
mutations:{}
actions:{}

import  { toRefs } from 'vue'
import { useStore } from 'vuex';
export default{
    name:'Home',
    setup(){
        const store = useStore();
        const {name} = toRefs(store.state);
        return{
            name
        }
    }
}
const handleClick = ()=>{
    提交一个commit请求,在mutations里面直接响应
    store.commit('changeName','hello')
}

axios使用axios发送ajax请求
npm install axios
引入axios 
import axios from 'axios';

axios.get('www.111111fastmock.com').then(
    (response)=>{
        const msg = response.data.message;
        store.commit('changeName',msg)
    }
)

})
